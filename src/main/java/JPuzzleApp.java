/*
 * JPuzzleApp.java
 *
 * Copyright (c) 1999 Joseph Bowbeer. All Rights Reserved.
 */

import javax.swing.*;
import java.applet.AudioClip;
import java.awt.event.*;
import java.beans.*;
import java.text.ChoiceFormat;
import java.text.ParsePosition;

/**
 * A demo applet for the Puzzle JavaBean.
 * <p>
 * Java 2 and Swing 1.1 required.
 *
 * @author <a href="mailto:jozart@csi.com">Joseph Bowbeer</a>
 * @version 1.2
 */
public class JPuzzleApp extends JApplet {

    /** Solver speeds and associated delays. */
    private static final ChoiceFormat delays = new ChoiceFormat (
        new double[] {1,        100,    500,      3000},
        new String[] {"faster", "fast", "medium", "slow"}
    );

    /** Cheer audio clip. */
    private AudioClip cheer =
        newAudioClip(getClass().getResource("yahoo.au"));

    /** Image choices. */
    private ImageIcon[] icons = {
        null,
        new ImageIcon(getClass().getResource("tiger.gif"), "tiger"),
        new ImageIcon(getClass().getResource("eye.gif"),   "eyeball")
    };

    /** Initializes the Form */
    public JPuzzleApp() {
        initComponents ();

        // Image
        Object item = "tiger"; // puzzle.getIcon();
        for (int i = 0; i < icons.length; i++) {
            ImageIcon icon = icons[i];
            jcmbImage.addItem(icon == null ?
                "(none)" : icon.getDescription());
        };
        jcmbImage.setSelectedItem(item);

        // Rows
        item = new Integer(puzzle.getRows());
        for (int i = 3; i <= 10; i++) {
            jcmbRows.addItem(new Integer(i));
        }
        jcmbRows.setSelectedItem(item);

        // Columns
        item = new Integer(puzzle.getColumns());
        for (int i = 3; i <= 10; i++) {
            jcmbColumns.addItem(new Integer(i));
        }
        jcmbColumns.setSelectedItem(item);

        // Gap
        item = new Integer(puzzle.getGap());
        for (int i = 0; i <= 2; i++) {
            jcmbGap.addItem(new Integer(i));
        }
        jcmbGap.setSelectedItem(item);

        // Bevel height
        item = new Integer(puzzle.getBevelHeight());
        for (int i = 0; i <= 2; i++) {
            jcmbBevel.addItem(new Integer(i));
        }
        jcmbBevel.setSelectedItem(item);

        // Solver speed
        item = delays.format(puzzle.getDelay());
        Object[] speeds = delays.getFormats();
        for (int n = speeds.length; n-- > 0; ) {
            jcmbSpeed.addItem(speeds[n]);
        }
        jcmbSpeed.setSelectedItem(item);

        // Labels
        boolean paintLabels = puzzle.isTextPainted();
        jchkPaintLabels.setSelected(paintLabels);
        jchkAntiAliased.setEnabled(paintLabels);
        jchkOutlined.setEnabled(paintLabels);
        jchkTranslucent.setEnabled(paintLabels);

        jchkAntiAliased.setSelected(puzzle.isTextAntiAliased());
        jchkOutlined.setSelected(puzzle.isTextOutlined());
        jchkTranslucent.setSelected(!puzzle.isTextOpaque());

        // Register for "history" and "solved" property changes

        puzzle.addPropertyChangeListener(new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent event) {
                puzzlePropertyChange(event);
            }
        });

        // Register handlers for the arrow keys

        Action actionArrow = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                String s = e.getActionCommand();
                     if ("LEFT".equals(s))   puzzle.moveHoleRight();
                else if ("UP".equals(s))     puzzle.moveHoleDown();
                else if ("RIGHT".equals(s))  puzzle.moveHoleLeft();
                else if ("DOWN".equals(s))   puzzle.moveHoleUp();
            }
        };

        JRootPane root = getRootPane();

        root.registerKeyboardAction(
            actionArrow, "LEFT",  // left arrow
            KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0),
            JComponent.WHEN_IN_FOCUSED_WINDOW);

        root.registerKeyboardAction(
            actionArrow, "UP",    // up arrow
            KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0),
            JComponent.WHEN_IN_FOCUSED_WINDOW);

        root.registerKeyboardAction(
            actionArrow, "RIGHT", // right arrow
            KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0),
            JComponent.WHEN_IN_FOCUSED_WINDOW);

        root.registerKeyboardAction(
            actionArrow, "DOWN",  // down arrow
            KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0),
            JComponent.WHEN_IN_FOCUSED_WINDOW);

        root.setDefaultButton(jbtnScramble);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form. <p>
     * WARNING: Do NOT modify this code. The body of this method
     * is always regenerated by the NetBeans FormEditor.
     */
    private void initComponents () {//GEN-BEGIN:initComponents
        getContentPane ().setLayout (new java.awt.GridBagLayout ());
        java.awt.GridBagConstraints gridBagConstraints1;

        jPanel1 = new JPanel ();
        jPanel1.setLayout (new java.awt.FlowLayout (1, 5, 8));

            jbtnScramble = new JButton ();
            jbtnScramble.setText ("Scramble");
            jbtnScramble.setForeground (java.awt.Color.blue);
            jbtnScramble.setFont (new java.awt.Font ("Dialog", 1, 12));
            jbtnScramble.addActionListener (new ActionListener () {
                    public void actionPerformed (ActionEvent evt) {
                        jbtnScrambleActionPerformed (evt);
                    }
                }
            );
            jPanel1.add (jbtnScramble);

            jbtnSolve = new JButton ();
            jbtnSolve.setEnabled (false);
            jbtnSolve.setText ("Solve");
            jbtnSolve.setForeground (java.awt.Color.blue);
            jbtnSolve.setFont (new java.awt.Font ("Dialog", 1, 12));
            jbtnSolve.addActionListener (new ActionListener () {
                    public void actionPerformed (ActionEvent evt) {
                        jbtnSolveActionPerformed (evt);
                    }
                }
            );
            jPanel1.add (jbtnSolve);

            jbtnBack = new JButton ();
            jbtnBack.setEnabled (false);
            jbtnBack.setText ("Back");
            jbtnBack.setForeground (java.awt.Color.blue);
            jbtnBack.setFont (new java.awt.Font ("Dialog", 1, 12));
            jbtnBack.addActionListener (new ActionListener () {
                    public void actionPerformed (ActionEvent evt) {
                        jbtnBackActionPerformed (evt);
                    }
                }
            );
            jPanel1.add (jbtnBack);

            jbtnNext = new JButton ();
            jbtnNext.setEnabled (false);
            jbtnNext.setText ("Next");
            jbtnNext.setForeground (java.awt.Color.blue);
            jbtnNext.setFont (new java.awt.Font ("Dialog", 1, 12));
            jbtnNext.addActionListener (new ActionListener () {
                    public void actionPerformed (ActionEvent evt) {
                        jbtnNextActionPerformed (evt);
                    }
                }
            );
            jPanel1.add (jbtnNext);

        gridBagConstraints1 = new java.awt.GridBagConstraints ();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 0;
        getContentPane ().add (jPanel1, gridBagConstraints1);

        puzzle = new jozart.jpuzzle.Puzzle ();
        puzzle.setGap (1);
        puzzle.setTextPainted (false);
        gridBagConstraints1 = new java.awt.GridBagConstraints ();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 1;
        gridBagConstraints1.gridheight = 0;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.insets = new java.awt.Insets (0, 8, 8, 8);
        gridBagConstraints1.weightx = 1.0;
        gridBagConstraints1.weighty = 1.0;
        getContentPane ().add (puzzle, gridBagConstraints1);

        jPanel2 = new JPanel ();
        jPanel2.setBorder (new javax.swing.border.CompoundBorder (
            new javax.swing.border.TitledBorder (null, "Puzzle Settings", 1, 2, new java.awt.Font ("Dialog", 1, 12)),
            new javax.swing.border.EmptyBorder (new java.awt.Insets(10, 20, 10, 20))));
        jPanel2.setLayout (new java.awt.GridBagLayout ());
        java.awt.GridBagConstraints gridBagConstraints2;

            jlblImage = new JLabel ();
            jlblImage.setText ("Image");
            gridBagConstraints2 = new java.awt.GridBagConstraints ();
            gridBagConstraints2.insets = new java.awt.Insets (0, 0, 3, 4);
            gridBagConstraints2.anchor = java.awt.GridBagConstraints.EAST;
            jPanel2.add (jlblImage, gridBagConstraints2);

            jcmbImage = new JComboBox ();
            jcmbImage.addActionListener (new ActionListener () {
                    public void actionPerformed (ActionEvent evt) {
                        jcmbImageActionPerformed (evt);
                    }
                }
            );
            gridBagConstraints2 = new java.awt.GridBagConstraints ();
            gridBagConstraints2.gridwidth = 0;
            gridBagConstraints2.insets = new java.awt.Insets (0, 0, 3, 0);
            gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
            jPanel2.add (jcmbImage, gridBagConstraints2);

            jlblRows = new JLabel ();
            jlblRows.setText ("Rows");
            gridBagConstraints2 = new java.awt.GridBagConstraints ();
            gridBagConstraints2.insets = new java.awt.Insets (0, 0, 3, 4);
            gridBagConstraints2.anchor = java.awt.GridBagConstraints.EAST;
            jPanel2.add (jlblRows, gridBagConstraints2);

            jcmbRows = new JComboBox ();
            jcmbRows.addActionListener (new ActionListener () {
                    public void actionPerformed (ActionEvent evt) {
                        jcmbRowsActionPerformed (evt);
                    }
                }
            );
            gridBagConstraints2 = new java.awt.GridBagConstraints ();
            gridBagConstraints2.gridwidth = 0;
            gridBagConstraints2.insets = new java.awt.Insets (0, 0, 3, 0);
            gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
            jPanel2.add (jcmbRows, gridBagConstraints2);

            jlblColumns = new JLabel ();
            jlblColumns.setText ("Columns");
            gridBagConstraints2 = new java.awt.GridBagConstraints ();
            gridBagConstraints2.insets = new java.awt.Insets (0, 0, 3, 4);
            gridBagConstraints2.anchor = java.awt.GridBagConstraints.EAST;
            jPanel2.add (jlblColumns, gridBagConstraints2);

            jcmbColumns = new JComboBox ();
            jcmbColumns.addActionListener (new ActionListener () {
                    public void actionPerformed (ActionEvent evt) {
                        jcmbColumnsActionPerformed (evt);
                    }
                }
            );
            gridBagConstraints2 = new java.awt.GridBagConstraints ();
            gridBagConstraints2.gridwidth = 0;
            gridBagConstraints2.insets = new java.awt.Insets (0, 0, 3, 0);
            gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
            jPanel2.add (jcmbColumns, gridBagConstraints2);

            jlblGap = new JLabel ();
            jlblGap.setText ("Gap");
            gridBagConstraints2 = new java.awt.GridBagConstraints ();
            gridBagConstraints2.insets = new java.awt.Insets (0, 0, 3, 4);
            gridBagConstraints2.anchor = java.awt.GridBagConstraints.EAST;
            jPanel2.add (jlblGap, gridBagConstraints2);

            jcmbGap = new JComboBox ();
            jcmbGap.addActionListener (new ActionListener () {
                    public void actionPerformed (ActionEvent evt) {
                        jcmbGapActionPerformed (evt);
                    }
                }
            );
            gridBagConstraints2 = new java.awt.GridBagConstraints ();
            gridBagConstraints2.gridwidth = 0;
            gridBagConstraints2.insets = new java.awt.Insets (0, 0, 3, 0);
            gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
            jPanel2.add (jcmbGap, gridBagConstraints2);

            jlblBevel = new JLabel ();
            jlblBevel.setText ("Bevel");
            gridBagConstraints2 = new java.awt.GridBagConstraints ();
            gridBagConstraints2.insets = new java.awt.Insets (0, 0, 3, 4);
            gridBagConstraints2.anchor = java.awt.GridBagConstraints.EAST;
            jPanel2.add (jlblBevel, gridBagConstraints2);

            jcmbBevel = new JComboBox ();
            jcmbBevel.addActionListener (new ActionListener () {
                    public void actionPerformed (ActionEvent evt) {
                        jcmbBevelActionPerformed (evt);
                    }
                }
            );
            gridBagConstraints2 = new java.awt.GridBagConstraints ();
            gridBagConstraints2.gridwidth = 0;
            gridBagConstraints2.insets = new java.awt.Insets (0, 0, 3, 0);
            gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
            jPanel2.add (jcmbBevel, gridBagConstraints2);

            jlblSpeed = new JLabel ();
            jlblSpeed.setText ("Speed");
            gridBagConstraints2 = new java.awt.GridBagConstraints ();
            gridBagConstraints2.insets = new java.awt.Insets (0, 0, 3, 4);
            gridBagConstraints2.anchor = java.awt.GridBagConstraints.EAST;
            jPanel2.add (jlblSpeed, gridBagConstraints2);

            jcmbSpeed = new JComboBox ();
            jcmbSpeed.addActionListener (new ActionListener () {
                    public void actionPerformed (ActionEvent evt) {
                        jcmbSpeedActionPerformed (evt);
                    }
                }
            );
            gridBagConstraints2 = new java.awt.GridBagConstraints ();
            gridBagConstraints2.gridwidth = 0;
            gridBagConstraints2.insets = new java.awt.Insets (0, 0, 3, 0);
            gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
            jPanel2.add (jcmbSpeed, gridBagConstraints2);

            jchkPaintLabels = new JCheckBox ();
            jchkPaintLabels.setText ("Paint Labels");
            jchkPaintLabels.addActionListener (new ActionListener () {
                    public void actionPerformed (ActionEvent evt) {
                        jchkPaintLabelsActionPerformed (evt);
                    }
                }
            );
            gridBagConstraints2 = new java.awt.GridBagConstraints ();
            gridBagConstraints2.gridwidth = 0;
            gridBagConstraints2.insets = new java.awt.Insets (20, 20, 0, 0);
            gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
            jPanel2.add (jchkPaintLabels, gridBagConstraints2);

            jchkAntiAliased = new JCheckBox ();
            jchkAntiAliased.setText ("Anti-aliased");
            jchkAntiAliased.addActionListener (new ActionListener () {
                    public void actionPerformed (ActionEvent evt) {
                        jchkAntiAliasedActionPerformed (evt);
                    }
                }
            );
            gridBagConstraints2 = new java.awt.GridBagConstraints ();
            gridBagConstraints2.gridwidth = 0;
            gridBagConstraints2.insets = new java.awt.Insets (0, 40, 0, 0);
            gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
            jPanel2.add (jchkAntiAliased, gridBagConstraints2);

            jchkOutlined = new JCheckBox ();
            jchkOutlined.setText ("Outlined");
            jchkOutlined.addActionListener (new ActionListener () {
                    public void actionPerformed (ActionEvent evt) {
                        jchkOutlinedActionPerformed (evt);
                    }
                }
            );
            gridBagConstraints2 = new java.awt.GridBagConstraints ();
            gridBagConstraints2.gridwidth = 0;
            gridBagConstraints2.insets = new java.awt.Insets (0, 40, 0, 0);
            gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
            jPanel2.add (jchkOutlined, gridBagConstraints2);

            jchkTranslucent = new JCheckBox ();
            jchkTranslucent.setText ("Translucent");
            jchkTranslucent.addActionListener (new ActionListener () {
                    public void actionPerformed (ActionEvent evt) {
                        jchkTranslucentActionPerformed (evt);
                    }
                }
            );
            gridBagConstraints2 = new java.awt.GridBagConstraints ();
            gridBagConstraints2.gridwidth = 0;
            gridBagConstraints2.insets = new java.awt.Insets (0, 40, 0, 0);
            gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
            jPanel2.add (jchkTranslucent, gridBagConstraints2);

            jPanel3 = new JPanel ();
            jPanel3.setLayout (new java.awt.FlowLayout ());

            gridBagConstraints2 = new java.awt.GridBagConstraints ();
            gridBagConstraints2.gridwidth = 0;
            gridBagConstraints2.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints2.weighty = 1.0;
            jPanel2.add (jPanel3, gridBagConstraints2);

        gridBagConstraints1 = new java.awt.GridBagConstraints ();
        gridBagConstraints1.gridwidth = 0;
        gridBagConstraints1.gridheight = 0;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints1.insets = new java.awt.Insets (12, 5, 8, 12);
        getContentPane ().add (jPanel2, gridBagConstraints1);

    }//GEN-END:initComponents

    private void jbtnScrambleActionPerformed (ActionEvent evt) {//GEN-FIRST:event_jbtnScrambleActionPerformed
        puzzle.scramble ();
    }//GEN-LAST:event_jbtnScrambleActionPerformed

    private void jbtnSolveActionPerformed (ActionEvent evt) {//GEN-FIRST:event_jbtnSolveActionPerformed
        if ("Solve".equals(evt.getActionCommand()))
        {
            jbtnSolve.setText("Stop");
            puzzle.startSolving();
        }
        else
        {
            puzzle.stopSolving();
            jbtnSolve.setText("Solve");
        }
    }//GEN-LAST:event_jbtnSolveActionPerformed

    private void jbtnBackActionPerformed (ActionEvent evt) {//GEN-FIRST:event_jbtnBackActionPerformed
        puzzle.moveBackward ();
    }//GEN-LAST:event_jbtnBackActionPerformed

    private void jbtnNextActionPerformed (ActionEvent evt) {//GEN-FIRST:event_jbtnNextActionPerformed
        puzzle.moveForward ();
    }//GEN-LAST:event_jbtnNextActionPerformed

    private void jcmbImageActionPerformed (ActionEvent evt) {//GEN-FIRST:event_jcmbImageActionPerformed
        int index = jcmbImage.getSelectedIndex ();
        puzzle.setIcon (icons[index]);
    }//GEN-LAST:event_jcmbImageActionPerformed

    private void jcmbRowsActionPerformed (ActionEvent evt) {//GEN-FIRST:event_jcmbRowsActionPerformed
        int value = ((Integer) jcmbRows.getSelectedItem ()).intValue();
        puzzle.setRows (value);
    }//GEN-LAST:event_jcmbRowsActionPerformed

    private void jcmbColumnsActionPerformed (ActionEvent evt) {//GEN-FIRST:event_jcmbColumnsActionPerformed
        int value = ((Integer) jcmbColumns.getSelectedItem ()).intValue();
        puzzle.setColumns (value);
    }//GEN-LAST:event_jcmbColumnsActionPerformed

    private void jcmbGapActionPerformed (ActionEvent evt) {//GEN-FIRST:event_jcmbGapActionPerformed
        int value = ((Integer) jcmbGap.getSelectedItem ()).intValue();
        puzzle.setGap (value);
    }//GEN-LAST:event_jcmbGapActionPerformed

    private void jcmbBevelActionPerformed (ActionEvent evt) {//GEN-FIRST:event_jcmbBevelActionPerformed
        int value = ((Integer) jcmbBevel.getSelectedItem ()).intValue();
        puzzle.setBevelHeight (value);
    }//GEN-LAST:event_jcmbBevelActionPerformed

    private void jcmbSpeedActionPerformed (ActionEvent evt) {//GEN-FIRST:event_jcmbSpeedActionPerformed
        String speed = (String) jcmbSpeed.getSelectedItem ();
        puzzle.setDelay (delays.parse(speed, new ParsePosition(0)).intValue());
    }//GEN-LAST:event_jcmbSpeedActionPerformed

    private void jchkPaintLabelsActionPerformed (ActionEvent evt) {//GEN-FIRST:event_jchkPaintLabelsActionPerformed
        boolean textPainted = jchkPaintLabels.isSelected();
        puzzle.setTextPainted(textPainted);
        jchkAntiAliased.setEnabled(textPainted);
        jchkOutlined.setEnabled(textPainted);
        jchkTranslucent.setEnabled(textPainted);
    }//GEN-LAST:event_jchkPaintLabelsActionPerformed

    private void jchkAntiAliasedActionPerformed (ActionEvent evt) {//GEN-FIRST:event_jchkAntiAliasedActionPerformed
        puzzle.setTextAntiAliased (jchkAntiAliased.isSelected ());
    }//GEN-LAST:event_jchkAntiAliasedActionPerformed

    private void jchkOutlinedActionPerformed (ActionEvent evt) {//GEN-FIRST:event_jchkOutlinedActionPerformed
        puzzle.setTextOutlined (jchkOutlined.isSelected ());
    }//GEN-LAST:event_jchkOutlinedActionPerformed

    private void jchkTranslucentActionPerformed (ActionEvent evt) {//GEN-FIRST:event_jchkTranslucentActionPerformed
        puzzle.setTextOpaque (!jchkTranslucent.isSelected ());
    }//GEN-LAST:event_jchkTranslucentActionPerformed

// Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel jPanel1;
    private jozart.jpuzzle.Puzzle puzzle;
    private JPanel jPanel2;
    private JButton jbtnScramble;
    private JButton jbtnSolve;
    private JButton jbtnBack;
    private JButton jbtnNext;
    private JLabel jlblImage;
    private JComboBox jcmbImage;
    private JLabel jlblRows;
    private JComboBox jcmbRows;
    private JLabel jlblColumns;
    private JComboBox jcmbColumns;
    private JLabel jlblGap;
    private JComboBox jcmbGap;
    private JLabel jlblBevel;
    private JComboBox jcmbBevel;
    private JLabel jlblSpeed;
    private JComboBox jcmbSpeed;
    private JCheckBox jchkPaintLabels;
    private JCheckBox jchkAntiAliased;
    private JCheckBox jchkOutlined;
    private JCheckBox jchkTranslucent;
    private JPanel jPanel3;
// End of variables declaration//GEN-END:variables

    /** Restarts the solver when the applet is restarted. */
    public void start()
    {
        String s = jbtnSolve.getActionCommand();
        if ("Stop".equals(s))
            puzzle.startSolving();
    }

    /** Stops the solver when the applet is stopped. */
    public void stop()
    {
        puzzle.stopSolving();
    }

    /** Handles "history" and "solved" property changes. */
    private void puzzlePropertyChange(PropertyChangeEvent event)
    {
        String propertyName = event.getPropertyName();
        if ("history".equals(propertyName)) // Puzzle.HISTORY
        {
            Object newValue = event.getNewValue();
            if (newValue instanceof Boolean)
            {
                boolean history = ((Boolean)newValue).booleanValue();
                // Enable the Button on condition...
                jbtnBack.setEnabled(history);
            }
        }
        else
        if ("solved".equals(propertyName))  // Puzzle.SOLVED
        {
            Object newValue = event.getNewValue();
            if (newValue instanceof Boolean)
            {
                boolean solved = ((Boolean)newValue).booleanValue();
                // Disable the Button on condition...
                jbtnNext.setEnabled(!solved);
                jbtnSolve.setEnabled(!solved);
                if (solved)
                {
                    // Celebrate
                    if (cheer != null)
                    {
                        cheer.play();
                    }
                    jbtnSolve.setText("Solve");
                }
            }
        }
    }


    /**
     * Launches this applet in a frame.
     */
    public static void main(String[] args) {
        JFrame frame = new JFrame("Puzzle");
        frame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent event) {
                System.exit(0);
            }
        });
        JApplet applet = new JPuzzleApp();
        frame.setIconImage(new ImageIcon(applet.getClass().getResource("icon16.gif")).getImage());
        frame.getContentPane().add(applet, "Center");
        frame.pack();
        frame.show();
        applet.init();
        applet.start();
    }

}
